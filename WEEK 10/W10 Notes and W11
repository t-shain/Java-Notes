-----------------------------------------------------------------------------------------------------------------------------------------------------------
[Polymorphism continued]

Shape s = new Circle("green", false, 12.4);
|+|Only the Shape values in this variable are able to be used the |s| variable. 

s.getColor(); // works
s.getBool(); // works
s.getRadius(); // DOES NOT beacuse getRadius is only part of the Circle class and not in the Shape class. 

|+|if a subclass has overwritten a superclass method then it will use the subclasses method over the superclasses as long as the object is a subclass (even
works when the sub class object is assigned to a superclass variable)
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[Abstract Methods and Classes] A method with no body, is only a placeholder. Must be rewritten by another class. 

public abstract double getAtrea();

|+|An class with an abstract method needs to have its sub classes override this. 
|+|Any class that has one or more abstract methods must be absract, or it wont compile without the header. 
|+|Abstract classes can not be instatiated and made into objects. 
|+| subclases NEED to override abstract methods in the superclasses. 

|+| You can use abstract classes when you call on object that is a superclass but want to use subclasses methods. 

Shape s = new Circle();
s.getArea(); // will work becasue getArea is an abstract method in the superclass 
Shape s2 = new Circle();
s.getRadius(); // will NOT work becasue getRadius is only in Circle class and not in Shape class. 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[Interfaces] A collection of abstract methods. NO OTHER methods can be made within an interface. 
|+| like signing a contract. You have to provide the behavior within the interface. 
|+| you can add multiple interfaces by using commas. 

public interface Driveable {
    public abstract void forward();
}

|+| example of class that uses the Driveable interface 

public class Car implements Driveable {
    public void forward() {
        sout("step on gas");
    }
}

|+| You can use the interface Driveable as a type in methods that only use the Driveables methods. 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

