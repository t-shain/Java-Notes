-----------------------------------------------------------------------------------------------------------------------------------------------------------
[Exceptions] Handeling erros and exceptions within the code of a program. 

|+| Unchecked exceptions do not need to be handled with a try block but must be fixed by logically changing your code. 
These are called errors in the object tree

|+| Checked exceptions can be handled with try blocks. There are seperated branches of the object class for exceptions. 
|+| Exceptions are objects that can be called and used in the try catch block


try{

// stuff to try that may return exception // also called a try suite //

} catch(ExceptionName e) {

// stuff to do if exception is thrown

}


|+| make your try blocks as small as possible. 
|+| using System.exit(1); exits they system and basically clears the work your code has done. 
|+| You can have exceptions that Exented a clas. 
|+| you can create new exception classes and use the throw keyword instead of return. 
|+| Exceptions have a .getMessage() that will return a string that describes what the exception is.

|+| Just adding a throws clause by your method title will just tell the machine to be prepared for a excpetion but it does not know how to handle it. You 
want to use throws for unchecked exceptions like we did with files. Not for runtime, aka checked exceptions. 


-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[Recursion] when a method calls itself. Similar to a while loop. 

|+| recursive functions need a sentenial of some kind to know when to stop calling itself. 

|+| every recursive function has a base case and a recursive case. 
example with calculating factorials. 

|+| base case is what stops the recursion from being infinite.

public static int factorial(int n) {
  //base case
  if (n==0) // this stops the recursion. 
    return 1; 
  
  //recursive case
  return n * factorial(n-1)

}


-----------------------------------------------------------------------------------------------------------------------------------------------------------
