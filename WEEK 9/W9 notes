-----------------------------------------------------------------------------------------------------------------------------------------------------------
[Binary search] (DATA MUST BE SORTED)
if you know a group of numbers is sorted in order you can use BINARY search for finding a number.
you go to the middle of the group, if the value is higher cut out the lower half and then go to the middle of that. Continue to have until your value is there.

[4, 7, 15, 22, 35, 52, 65, 70]

first = array[0]
last = array[7]
middle = (7+0)/2 //which is three, becasue of truncation//


if middle is < value then we throw away the lower values. by doing first's index is (middle + 1).
if middle is > value then we throw away the higher values. by doing last's index is (middle -1).

start with while loop (!found and first <= last)

f 0 4 4 
m 3 5 4  found
l 7 7 6 

-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[Selection Sort] 
goes through all memebers of group and finds smallest value, then swaps it to the smallest index. then ignores that index 
and finds the next smallest member. 

Start with unsorted group, and do a number of passes. 
[26, 55, 94, 18, 78, 30, 46, 56, 25]

Pass 1: go to first element and find an element that is smaller and swap it. 
[|18|, 55, 94, 26, 78, 30, 46, 56, 25] 
Pass 2: go to index after first element and then go through list and find element that is smaller.
[18, |25|, 94, 26, 78, 30, 46, 56, |55|] 

etc

have a start scan that is at index 0, goes through finds smallest then swaps
then start scan goes to index 1 goes through and finds the smallests and swaps

for objects, you need to implement a compare to and equals.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 
* add if(other == null) return false; in equals method it a different object is used. 

-----------------------------------------------------------------------------------------------------------------------------------------------------------
[INHERITENCE] When an object is a subclass of another object. The subclasses can excess the superclasses constructors, and its public variables and
methods. Every class that is created is a subclass of the [Object] class. Is refered to as a "is-a" relationship. Any method calls in the super class can be used by the subclass. 


|+| creating a subclass goes as follows:

public class SubClass extends SuperClass{
	public Boolean t;
	
	
	public SubClass(String s, Double d, Boolean t){ //Constructor for SubClass //
		super(s, d); //This calls the superclasses constructor that uses two parameters, doing super.super.super.etc goes up the change of superclasses//
					 // you can not call the super() constructor later in the subclass it has to be FIRST //
					 // if a super isnt called in a subclass it will automatically call the superclasses deafult constructor or no 							param constructor//
		this.t = t;
	}
}

|+| Subclasses when complied go to the superclasses constructor first. and compile the superclasses code before the subclasses. Superclasses will always be
called be subclasses.

|+| You can override superclasss methods (makes sure to use @Override notation so you can catch errors) So when objects with the subclass type will use a different method even though it has the same name. 

|+| If a subclass doesnt have a constructor and the superclass does not either then it will casue an error.

|+| getters and setters in subclasses are only for things in the subclass. 

-----------------------------------------------------------------------------------------------------------------------------------------------------------
