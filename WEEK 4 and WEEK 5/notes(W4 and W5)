-CLASSES--------------------------------------------------------------------------------------------------------------------------------------------------
Bascially our a group of methods that are blueprints for building up a thing (aka object).
Classes create objects that have specfic methods, and variables that are within the scope of the class, and not the rest of your program. 

The center of OBJECT ORIENTED PROGRAMING
-----------------------------------------------------------------------------------------------------------------------------------------------------------


-UML Diagrams----------------------------------------------------------------------------------------------------------------------------------------------
+ is public method, - is private method only to be used insde of class. 
First block is the variables that need to be initialized, second block are the methods.
Methods that return values have the : return value at the end. 
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-Constructor-----------------------------------------------------------------------------------------------------------------------------------------------
-Is method matches class name, when object is defined in another class it takes items put into the parenthesis. Creates the object in some state.
Classes can have multiple constructors. 
- Is only created as 
--public ConstrucName(params){
	}

- using this. refers to the obect variables so when you shadow variables there is no confusion. 
-if no constructor is provided java "creates" one and sets all values to there most zero value. (0 for numbers, false for boolean)
	-Once you write a single constructor you no longer get the null constructor 
	
-to call a constructor within a constructer aka write a constructor in terms of another.  
	-the "this" keyword allows you to do this. 
	-instead of the name of the constructor just use the keyword "this"
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-Getters and Setters---------------------------------------------------------------------------------------------------------------------------------------
-Getters get objects that already have values within the class, methods return values
-Setters set variables within the class.
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-Static methods and Static variables-----------------------------------------------------------------------------------------------------------------------
-Static keyword is general is used to make something in refrence to just the class and does not need an instance to be used. 

-When a class contains a static method, it isnâ€™t necessary for an instance of the class to be created in order to execute the method.
--public static int getNumCircles() {
      return numCircles();
   } // Method is accesed by simple doing Circle.getNumCircles() no instance is needed. 
-Static methods cannot use variables from within the class becasue they are at a different level.
   
   
-Static values or variables dont need instances to reach them, it just belongs to the class. (Circle.DEFUALT RADIUS)
--private static final int DEFAULT_RADIUS = 10;

-----------------------------------------------------------------------------------------------------------------------------------------------------------

-toString, equals, and inheritence-------------------------------------------------------------------------------------------------------------------------
-Every class has a "Object" as a superclass
-Every class has built in methods that can still be changed using overrides and new methods. 

-to write a true override write @Override before your method. 

-a method that is automatically called when a object needs to be turned into a string. 
- if no method is made it returns an @xxxxxxxxxx (hecidecimal code)


-the toString method gives yoyu a representation of each instance. 
@Override
--public String toString() {
      String s = String.format("x : %d, y : %d, radius : %d", getX(), getY(), getRadius()); //safer to use methods (getters) instead of the
      															actual variables//
      return s;                  
  }  

-the equals method is similar to toString it is inherited by every class but to specifically get it to work for your function you need to make your own. 
-Every class object can see the data of all the other class objects. 

@Override
public boolean equals(Object other) {
	Circle cOther = (Circle)other; //allows the constructor to look for a circle within a object address
	if(this.x == cOther.x && this.y == cOther.y && this.radius == cOther.radius) //"this." is not needed but I like it so there! //
		return true;
	return false;
	
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------
